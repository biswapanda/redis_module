# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_redismodule', [dirname(__file__)])
        except ImportError:
            import _redismodule
            return _redismodule
        if fp is not None:
            try:
                _mod = imp.load_module('_redismodule', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _redismodule = swig_import_helper()
    del swig_import_helper
else:
    import _redismodule
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_redismodule.REDISMODULE_OK_swigconstant(_redismodule)
REDISMODULE_OK = _redismodule.REDISMODULE_OK

_redismodule.REDISMODULE_ERR_swigconstant(_redismodule)
REDISMODULE_ERR = _redismodule.REDISMODULE_ERR

_redismodule.REDISMODULE_APIVER_1_swigconstant(_redismodule)
REDISMODULE_APIVER_1 = _redismodule.REDISMODULE_APIVER_1

_redismodule.REDISMODULE_READ_swigconstant(_redismodule)
REDISMODULE_READ = _redismodule.REDISMODULE_READ

_redismodule.REDISMODULE_WRITE_swigconstant(_redismodule)
REDISMODULE_WRITE = _redismodule.REDISMODULE_WRITE

_redismodule.REDISMODULE_LIST_HEAD_swigconstant(_redismodule)
REDISMODULE_LIST_HEAD = _redismodule.REDISMODULE_LIST_HEAD

_redismodule.REDISMODULE_LIST_TAIL_swigconstant(_redismodule)
REDISMODULE_LIST_TAIL = _redismodule.REDISMODULE_LIST_TAIL

_redismodule.REDISMODULE_KEYTYPE_EMPTY_swigconstant(_redismodule)
REDISMODULE_KEYTYPE_EMPTY = _redismodule.REDISMODULE_KEYTYPE_EMPTY

_redismodule.REDISMODULE_KEYTYPE_STRING_swigconstant(_redismodule)
REDISMODULE_KEYTYPE_STRING = _redismodule.REDISMODULE_KEYTYPE_STRING

_redismodule.REDISMODULE_KEYTYPE_LIST_swigconstant(_redismodule)
REDISMODULE_KEYTYPE_LIST = _redismodule.REDISMODULE_KEYTYPE_LIST

_redismodule.REDISMODULE_KEYTYPE_HASH_swigconstant(_redismodule)
REDISMODULE_KEYTYPE_HASH = _redismodule.REDISMODULE_KEYTYPE_HASH

_redismodule.REDISMODULE_KEYTYPE_SET_swigconstant(_redismodule)
REDISMODULE_KEYTYPE_SET = _redismodule.REDISMODULE_KEYTYPE_SET

_redismodule.REDISMODULE_KEYTYPE_ZSET_swigconstant(_redismodule)
REDISMODULE_KEYTYPE_ZSET = _redismodule.REDISMODULE_KEYTYPE_ZSET

_redismodule.REDISMODULE_KEYTYPE_MODULE_swigconstant(_redismodule)
REDISMODULE_KEYTYPE_MODULE = _redismodule.REDISMODULE_KEYTYPE_MODULE

_redismodule.REDISMODULE_REPLY_UNKNOWN_swigconstant(_redismodule)
REDISMODULE_REPLY_UNKNOWN = _redismodule.REDISMODULE_REPLY_UNKNOWN

_redismodule.REDISMODULE_REPLY_STRING_swigconstant(_redismodule)
REDISMODULE_REPLY_STRING = _redismodule.REDISMODULE_REPLY_STRING

_redismodule.REDISMODULE_REPLY_ERROR_swigconstant(_redismodule)
REDISMODULE_REPLY_ERROR = _redismodule.REDISMODULE_REPLY_ERROR

_redismodule.REDISMODULE_REPLY_INTEGER_swigconstant(_redismodule)
REDISMODULE_REPLY_INTEGER = _redismodule.REDISMODULE_REPLY_INTEGER

_redismodule.REDISMODULE_REPLY_ARRAY_swigconstant(_redismodule)
REDISMODULE_REPLY_ARRAY = _redismodule.REDISMODULE_REPLY_ARRAY

_redismodule.REDISMODULE_REPLY_NULL_swigconstant(_redismodule)
REDISMODULE_REPLY_NULL = _redismodule.REDISMODULE_REPLY_NULL

_redismodule.REDISMODULE_POSTPONED_ARRAY_LEN_swigconstant(_redismodule)
REDISMODULE_POSTPONED_ARRAY_LEN = _redismodule.REDISMODULE_POSTPONED_ARRAY_LEN

_redismodule.REDISMODULE_NO_EXPIRE_swigconstant(_redismodule)
REDISMODULE_NO_EXPIRE = _redismodule.REDISMODULE_NO_EXPIRE

_redismodule.REDISMODULE_ZADD_XX_swigconstant(_redismodule)
REDISMODULE_ZADD_XX = _redismodule.REDISMODULE_ZADD_XX

_redismodule.REDISMODULE_ZADD_NX_swigconstant(_redismodule)
REDISMODULE_ZADD_NX = _redismodule.REDISMODULE_ZADD_NX

_redismodule.REDISMODULE_ZADD_ADDED_swigconstant(_redismodule)
REDISMODULE_ZADD_ADDED = _redismodule.REDISMODULE_ZADD_ADDED

_redismodule.REDISMODULE_ZADD_UPDATED_swigconstant(_redismodule)
REDISMODULE_ZADD_UPDATED = _redismodule.REDISMODULE_ZADD_UPDATED

_redismodule.REDISMODULE_ZADD_NOP_swigconstant(_redismodule)
REDISMODULE_ZADD_NOP = _redismodule.REDISMODULE_ZADD_NOP

_redismodule.REDISMODULE_HASH_NONE_swigconstant(_redismodule)
REDISMODULE_HASH_NONE = _redismodule.REDISMODULE_HASH_NONE

_redismodule.REDISMODULE_HASH_NX_swigconstant(_redismodule)
REDISMODULE_HASH_NX = _redismodule.REDISMODULE_HASH_NX

_redismodule.REDISMODULE_HASH_XX_swigconstant(_redismodule)
REDISMODULE_HASH_XX = _redismodule.REDISMODULE_HASH_XX

_redismodule.REDISMODULE_HASH_CFIELDS_swigconstant(_redismodule)
REDISMODULE_HASH_CFIELDS = _redismodule.REDISMODULE_HASH_CFIELDS

_redismodule.REDISMODULE_HASH_EXISTS_swigconstant(_redismodule)
REDISMODULE_HASH_EXISTS = _redismodule.REDISMODULE_HASH_EXISTS

_redismodule.REDISMODULE_ERRORMSG_WRONGTYPE_swigconstant(_redismodule)
REDISMODULE_ERRORMSG_WRONGTYPE = _redismodule.REDISMODULE_ERRORMSG_WRONGTYPE

_redismodule.REDISMODULE_POSITIVE_INFINITE_swigconstant(_redismodule)
REDISMODULE_POSITIVE_INFINITE = _redismodule.REDISMODULE_POSITIVE_INFINITE

_redismodule.REDISMODULE_NEGATIVE_INFINITE_swigconstant(_redismodule)
REDISMODULE_NEGATIVE_INFINITE = _redismodule.REDISMODULE_NEGATIVE_INFINITE

def RedisModule_Init(ctx, name, ver, apiver):
    return _redismodule.RedisModule_Init(ctx, name, ver, apiver)
RedisModule_Init = _redismodule.RedisModule_Init
# This file is compatible with both classic and new-style classes.

cvar = _redismodule.cvar

